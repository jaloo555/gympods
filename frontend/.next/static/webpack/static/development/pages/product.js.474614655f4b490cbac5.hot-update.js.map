{"version":3,"file":"static/webpack/static/development/pages/product.js.474614655f4b490cbac5.hot-update.js","sources":["webpack:///./components/Index/ProductCard.js","webpack:///./components/Index/ProductList.js"],"sourcesContent":["import Link from \"next/link\"\nimport {\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n} from \"reactstrap\"\n\nclass ProductCard extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n  render () {\n    let {name, description, _id, image} = this.props.res\n    return (\n      <div>\n        <Card body className=\"text-center\" key={_id}>\n          <CardImg\n            top={true}\n            style={{ height: 350 }}\n            src={`http://localhost:1337${image.url}`}\n          />\n          <CardBody>\n            <CardTitle>{name}</CardTitle>\n            <CardText>{description}</CardText>\n          </CardBody>\n          <div className=\"card-footer\">\n            <Link\n              as={`/supplements/${_id}`}\n              href={`/supplements?id=${_id}`}\n            >\n              <a className=\"btn btn-primary\">View</a>\n            </Link>\n          </div>   \n        </Card>\n      </div>\n    )\n  } \n}\nexport default ProductCard","import gql from \"graphql-tag\"\nimport Link from \"next/link\"\nimport {graphql} from \"react-apollo\"\nimport ProductCard from \"./ProductCard\"\nimport {\n  Card,\n  CardBody,\n  CardImg,\n  CardGroup,\n  CardColumns,\n  CardSubtitle,\n  CardText,\n  CardTitle,\n  Col,\n  Row\n} from \"reactstrap\"\n\nconst ProductList = (\n  { data: { loading, error, supplements }, search },req\n  ) => {\n    if (error) return \"Error loading supplements\"\n    if (supplements && supplements.length) {\n      //searchQuery\n      const searchQuery = supplements.filter(query =>\n        query.name.toLowerCase().includes(search)\n      );\n      if (searchQuery.length != 0) {\n        let productCards = searchQuery.map(res=>(\n          <Col sm=\"3\">\n            <ProductCard key={res._id} res={res}/>\n          </Col>\n        ))\n        return (\n        <div className=\"main\" id=\"productList\">\n          <h1 className=\"title\">Our Products</h1>\n          <div className=\"h-100 cards\">\n            <CardGroup>\n              {searchQuery.map(res => (\n                <Card\n                  style={{ width: \"100%\", margin: \"0 10px\" }}\n                  body\n                  className=\"text-center\"\n                  key={res._id}\n                >\n                  <CardImg\n                    top={true}\n                    style={{ height: 350 }}\n                    src={`http://localhost:1337${res.image.url}`}\n                  />\n                  <CardBody>\n                    <CardTitle>{res.name}</CardTitle>\n                    <CardText>{res.description}</CardText>\n                  </CardBody>\n                  <div className=\"card-footer\">\n                    <Link\n                      as={`/supplements/${res._id}`}\n                      href={`/supplements?id=${res._id}`}\n                    >\n                      <a className=\"btn btn-primary\">View</a>\n                    </Link>\n                  </div>\n                </Card>\n              ))}\n            </CardGroup>\n          </div>\n          <style jsx>{`\n            .main {\n              font-family: 'Bai Jamjuree', sans-serif;\n              margin: 40px 20px 20px 20px;\n            }\n            .title {\n              text-align: center;\n              margin: 20px;\n            }\n            .cards {\n              display: flex;\n            }\n          `}\n          </style>\n        </div>\n      )\n    } else {\n      return <h1>No products found</h1>\n    }\n  }\n  return <h1>Loading...</h1>\n}\n\nconst query = gql`\n  {\n    supplements {\n      _id\n      name\n      description\n      image {\n        url\n      }\n    }\n  }\n`\n\nexport default graphql(query, {\n  props: ({data})=> ({\n    data\n  })\n})(ProductList)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAOA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AA7BA;AACA;AA8BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxrBA;AAJA;AAAA;AAAA;AAAA;AAgDA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAaA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AADA;;;;A","sourceRoot":""}